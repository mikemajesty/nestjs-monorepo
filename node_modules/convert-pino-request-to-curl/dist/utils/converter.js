"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinoRequestConverter = void 0;
class PinoRequestConverter {
    static getCurl(request) {
        var _a, _b;
        let header = '';
        delete request.headers['content-length'];
        Object.keys((request === null || request === void 0 ? void 0 : request.headers) || {}).forEach((r) => (header += `--header '${r}: ${request.headers[String(r)]}' `));
        let params = '';
        Object.keys(request === null || request === void 0 ? void 0 : request.params).forEach((p) => (params += `/${p}/${request.params[String(p)]}`));
        const hasQueryParams = new RegExp('\\?.*').exec(request.url) || [];
        let query = '';
        if (hasQueryParams.length) {
            query = hasQueryParams[0];
            request.url = request.url.substring(0, request.url.lastIndexOf('?'));
        }
        const rawBody = (_a = request === null || request === void 0 ? void 0 : request.raw) === null || _a === void 0 ? void 0 : _a.body;
        const body = `--data-raw '${rawBody ? JSON.stringify(rawBody) : undefined}'`;
        const paramsUrl = `${(request === null || request === void 0 ? void 0 : request.params) ? params : ''}`;
        const protocol = request.raw.protocol;
        const curl = `curl --location -g --request ${request.method.toUpperCase()} '${protocol + '://' + request.headers.host + request.url + paramsUrl + query}' ${header} ${((_b = Object.keys(rawBody)) === null || _b === void 0 ? void 0 : _b.length) ? body : ''}`;
        return curl.trim();
    }
}
exports.PinoRequestConverter = PinoRequestConverter;
